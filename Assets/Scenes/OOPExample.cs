using System.Collections;
using System.Collections.Generic;
using UnityEngine;

#region OOP
//객체 지향 프로그래밍(OOP)

//기존의 방식 : 프로그램은 명령어들의 집합

//객체 지향식 설계 : 프로그램은 객체들의 모임

//클래스 : 객체 지향 프로그램의 기본 구성요소이자 사용자 정의 데이터 타입
//>> 변수와 함수를 같이 저장할 수 있는 자료구조

//객체 : 클래스가 실제로 메모리 상에 할당된 인스턴스

//필드 : 클래스 내부에 설계된 변수

//메서드 : 클래스 내부에 설계된 함수, 객체의 기능, 동작을 표현합니다.

//객체 지향 설계의 목적(특징)

//1. 캡슐화 : 클래스 내부의 서로 연관되어있는 속성과 기능을 하나의 캡슐처럼 만들어 데이터가
//데이터가 외부로부터 노출되는 것을 방지하는 설계법

//2. 상속  :    class 자식클래스 명 : 부모클래스명의 형태로 설계합니다
//부모 클래스가 가진 모든 변수와 함수를 상속 받고 그 기능을 사용할 수 있습니다.
//상황에 맞게 재정의하여 새로운 기능으로 만들어주는 것도 가능합니다.

//3. 다형성 : 같은 이름의 변수, 함수여도 상황에 따라 다른 의미로 사용될 수 있음.(조건에 따라 다르게 수행)
#endregion


public class OOPExample : MonoBehaviour
{
    // Start is called before the first frame update
    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        
    }
}
